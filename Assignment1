#lang plai-typed

;define drk
;main function for Assignment2

(define-type drk
  [drk-num (n : number)]
  [drk-add (nml : drk) (nmr : drk)]
  [drk-mult (nml : drk) (nmr : drk)]
  [drk-sub (nml : drk) (nmr : drk)]
  [drk-div (nml : drk) (nmr : drk)])

;; CORE LANGUAGE
;;the core language
;; eval drk -> number


(define (eval [expr : drk])
  (type-case drk expr
    [drk-num (n) n]
    [drk-add (nml nmr) (+ (eval nml) (eval nmr))]    ;drk-add add function
    [drk-mult (nml nmr) (* (eval nml) (eval nmr))]   ;drk-mult mult function
    [drk-sub (nml nmr) (- (eval nml) (eval nmr))]    ;drk-sub sub function
    [drk-div (nml nmr) (/ (eval nml) (eval nmr))]))  ;drk-div div function

;;testing core

(test (eval (drk-num 8))  8)
(test (eval (drk-num 5))  5)
(test (eval (drk-add (drk-num 3) (drk-num 4)))  8)
(test (eval (drk-sub (drk-num 5) (drk-num 2)))  3)
(test (eval (drk-div (drk-num 8) (drk-num 1)))  8)
(test (eval (drk-add (drk-add (drk-num 3) (drk-num 4)) (drk-num 35)))  42)
(test (eval (drk-mult (drk-add (drk-num 3) (drk-num 4)) (drk-num 5)))  60)
(test (eval (drk-add (drk-div (drk-num 20) (drk-num 5)) (drk-num 35)))  39)

;; parse s-expression -> drk
;; convert a quoted s expression into the equivalent drk form

(define (parse [s : s-expression]) : drk
  (cond
    [(s-exp-number? s) (drk-num (s-exp->number s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (case (s-exp->symbol (first sl))
         [(+) (drk-add (parse (second sl)) (parse (third sl)))]
         [(*) (drk-mult (parse (second sl)) (parse (third sl)))]
         [(-) (drk-sub (parse (second sl)) (parse (third sl)))]
         [(/) (drk-div (parse (second sl)) (parse (third sl)))]
         [else (error 'parse "invalid list input")]))]
    [else (error 'parse "invalid input")]))

;;testing parse

(test (parse '8) (drk-num 8))
(test (parse '2) (drk-num 2))
(test (parse '(+ 3 4)) (drk-add (drk-num 3) (drk-num 4)))
(test (parse '(/ 20 4)) (drk-div (drk-num 20) (drk-num 4)))
(test (parse '(* 2 8)) (drk-mult (drk-num 2) (drk-num 8)))
(test (parse '(+ (+ 3 4) 35)) (drk-add (drk-add (drk-num 3) (drk-num 4)) (drk-num 35)))
(test (parse '(+ (- 3 4) 35)) (drk-add (drk-sub (drk-num 3) (drk-num 1)) (drk-num 35)))
(test (parse '(/ (* 3 4) 6)) (drk-div (drk-mult (drk-num 3) (drk-num 4)) (drk-num 6)))
