; Grammar for drkC
;; drkC -> number
;; drkC -> symbol
;;if-greater-than-zero -> <drk> <drk> <drk>
;;appC -> <drk> <drk>

(define-type drkC
  [drkC-num (n : number)]
  [drkC-id (s : symbol)]
  [if-greater-than-zero (pred : drkC)(trueState : drkC)(falseState : drkC)]
  [appC (fun : symbol) (arg : drkC)]
  [plusC (l : drkC) (r : drkC)]
  [multC (l : drkC) (r : drkC)])


;; parseC : s-exp -> drkC
;; Purpose : To parseC given s-exp to abstract syntax drkC
;; Template : 
;(define (parseC [s : s-expression]) : drkC
;  (cond
;    [n ...]
;    [id ...]
;    any unary or binary function
;    ))

(define (parseC [s : s-expression]) : drkC
  (cond
    [(s-exp-number? s) (drkC-num (s-exp->number s))]
    [(s-exp-symbol? s) (drkC-id  (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
          (case (s-exp->symbol (first sl))
            [(ifzero)  (if-greater-than-zero 
                       (parseC (second sl))
                       (parseC (third sl))
                       (parseC (fourth sl)))]
            [(+) (plusC (parseC (second sl)) (parseC (third sl)))]
            [(*) (multC (parseC (second sl)) (parseC (third sl)))]
            [else (error 'parseC "invalid keyword !")]))]))

;;test

(test (parseC (number->s-exp 5))(drkC-num 5))
(test (parseC (symbol->s-exp 'x))(drkC-id 'x))
(test (parseC '(+ 3 4))(plusC (drkC-num 3)(drkC-num 4)))
(test (parseC '(* 3 4))(multC (drkC-num 3)(drkC-num 4)))
(test (parseC '(ifzero 4 5 6))(if-greater-than-zero (drkC-num 4)(drkC-num 5)(drkC-num 6)))
(test (parseC '(ifzero 3 4 5))(if-greater-than-zero (drkC-num 3)(drkC-num 4)(drkC-num 5)))
(test (parseC '(ifzero 1 3 5))(if-greater-than-zero (drkC-num 1)(drkC-num 3)(drkC-num 5)))
(test (parseC '(ifzero 2 7 9))(if-greater-than-zero (drkC-num 2)(drkC-num 7)(drkC-num 9)))
(test (parseC '(ifzero 7 8 9))(if-greater-than-zero (drkC-num 7)(drkC-num 8)(drkC-num 9)))
(test (parseC '(ifzero 12 15 29))(if-greater-than-zero (drkC-num 12)(drkC-num 15)(drkC-num 29)))

;; Function Definition Structure

(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : drkC)])

;; get-fundef : symbol (listof FunDefC) -> FunDefC
;; Purpose : To find given symbol's(function name/identifier) function definition
;; - from function definition namespace.
;; Template : Basic Structural Recursion
; (define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
;  (cond
;    [(empty? fds) ...]
;    [else ...(first fds) ...(get-fundef (rest fds))])

(define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds) (error 'get-fundef "reference to undefined function")]
    [(cons? fds) (cond
                   [(equal? n (fdC-name (first fds))) (first fds)]
                   [else (get-fundef n (rest fds))])]))

;; subst : number symbol drkC -> drkC
;; Purpose : To substitute symbols with expressions.
;; Template :
; (define (subst [what : drkC] [for : symbol] [in : drkC]) : drkC
;  (type-case drkC in
;    [drkC-num (n) ...]
;    [drkC-id (s) ...]
;    [appC (f a) ...]

(define (subst [what : number] [for : symbol] [in : drkC]) : drkC
  (type-case drkC in
    [drkC-num (n) in]
    [drkC-id (s) (cond
             [(symbol=? s for) (drkC-num what)] ;; What makes difference for eager evoluation in subst.
             [else in])]
    [plusC (l r) (plusC (subst what for l)
                      (subst what for r))]
    [multC (l r) (multC (subst what for l)
                      (subst what for r))]
    [appC (f a) (appC f (subst what for a))]
    [if-greater-than-zero (p t f) (error 'sust "error")]))

;; Tests:
(test (subst 4 'x (drkC-num 5))(drkC-num 5))
(test (subst 4 'x (drkC-id 'y)) (drkC-id 'y))
(test (subst 4 'x (drkC-id 'x)) (drkC-num 4))
(test (subst 5 'x (drkC-id 'x)) (drkC-num 5))
(test (subst 9 'x (drkC-id 'y)) (drkC-id 'y))

;; interp : drkC (listof FunDefC) -> number
;; Purpose : To evaluate expressions to numbers.
;; Template :
; (define (interp [e : drkC] [fds : (listof FunDefC)]) : number
;  (type-case drkC in
;    [drkC-num (n) ...]
;    [drkC-id (s) ...]
;; if-greater-than-zero : drkC drkC drkC -> drkC
;; an f statement that controls if first argument is zero 
;; -- or not, if it is zero that returns second argunment,
;; --- otherwise third argument. Partially lazy.

(define (interp [e : drkC][fds : (listof FunDefC)]) : number
  (type-case drkC e
    [drkC-num (n) n]
    [drkC-id (_) (error 'interp "shouldn't get here")]
    [if-greater-than-zero (pred t f)
             (if (< 0 (interp pred fds))
                 (interp t fds)
                 (interp f fds))]
    [appC (f a) (local ([define fd (get-fundef f fds)])
                  (interp (subst 
                           (interp a fds) ;; Make it eager evaluation !!
                           (fdC-arg fd)
                           (fdC-body fd))
                          fds))]
   [plusC (l r) (+ (interp l fds) (interp r fds))]
   [multC (l r) (* (interp l fds) (interp r fds))]
    ))

;test
(test (interp (parseC (number->s-exp 3)) empty) 3)
(test (interp (parseC '(+ 3 4)) empty) 7)
(test (interp (parseC '(* 3 4)) empty) 12)
(test (interp (if-greater-than-zero (drkC-num 1)(drkC-num 1)(drkC-num 1)) empty) 1)
(test (interp (if-greater-than-zero (drkC-num 2)(drkC-num 3)(drkC-num 4)) empty) 3)
(test (interp (if-greater-than-zero (drkC-num -4)(drkC-num 7)(drkC-num 9)) empty) 9)
(test (interp (if-greater-than-zero (drkC-num -6)(drkC-num 7)(drkC-num 8)) empty) 8)
(test (interp (if-greater-than-zero (drkC-num 3)(drkC-num 5)(drkC-num 6)) empty) 5)
