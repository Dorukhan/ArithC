
;; λ-expression grammar
;; λ-exp -> v
;; λ-exp -> (λ-exp λ-exp)
;; λ-exp -> (λ v λ-exp)
;; where v is a symbol.

;; λ-exp is an abstract syntax grammar or a parse tree definition for
;; - λ-exp that defined above.

(define-type λ-exp
  (λ-sym (v : symbol))
  (λ-app (l : λ-exp)(r : λ-exp))
  (λ-def (v : symbol)(p : λ-exp))
  )
;; Tests:
(λ-sym 'x)
(λ-app (λ-sym 'x)(λ-sym 'y))
(λ-def 'v (λ-app (λ-sym 'x)(λ-sym 'y)))

;; parse : s-exp -> λ-exp
;; Purpose : To transform given s-expression to corresponding
(define (parseλ (sexp : s-expression)) : λ-exp
  (cond
    [(s-exp-symbol? sexp)(λ-sym (s-exp->symbol sexp))]
    [(s-exp-list? sexp)
     (let ([sexp-list (s-exp->list sexp)])
       (cond
         [(= 2 (length sexp-list))
          (λ-app (parseλ (first sexp-list))(parseλ (second sexp-list)))]
         [(= 3 (length sexp-list))
          (if (and (symbol=? 'λ (s-exp->symbol (first sexp-list)))
                   (s-exp-symbol? (second sexp-list)))
              (λ-def (s-exp->symbol(second sexp-list))
                     (parseλ (third sexp-list)))
              (error 'parseλ "Not valid λ-definition")
              )]
         [else (error 'parseλ "Not valid length λ-exp")]
         ))]
    [else (error 'parseλ "Not valid λ-exp")]
    ))


;; A set represented as a list.
;; set-union : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the union of two sets.
(define (set-union (s1 : (listof symbol)) (s2 : (listof symbol))) : (listof symbol)
  (foldr (lambda (x y)
           (if (member x y)
               y
               (cons x y))) 
         empty
         (append s1 s2)))

;; Tests:
(test (set-union empty empty) empty)
(test (set-union empty (list 'x)) (list 'x))
(test (set-union (list 'x)(list 'x 'y)) (list 'x 'y))
(test (set-union (list 'x) (list 'x)) (list 'x))

;; set-difference : (listof symbol) (listof symbol) -> (listof symbol)
;; Purpose : To find the set difference of two sets.
(define (set-difference (s1 : (listof symbol))  (s2 : (listof symbol))) : (listof symbol)
  (filter (lambda (x)
            (not (member x s2)))
          s1))

;; Tests:
(test (set-difference empty (list 'x)) empty)
(test (set-difference (list 'x) empty) (list 'x))
(test (set-difference (list 'x)(list 'x 'y)) empty)
(test (set-difference (list 'x 'y)(list 'x))(list 'y))

;; free-identifier : λ-exp -> (listof symbol)
;; Purpose : To find free identifiers in given λ expression.
(define (free-identifier (le : λ-exp)) : (listof symbol)
  (type-case λ-exp le
    (λ-sym (v) (list v))
    (λ-app (l r)(set-union 
                 (free-identifier l)
                 (free-identifier r)))
    (λ-def (v p)(set-difference (free-identifier p)
                                (list v)))
    ))

;; Tests:
(test (free-identifier (parseλ (symbol->s-exp 'x))) (list 'x))
(test (free-identifier (parseλ '(λ x x))) empty)
(test (free-identifier (parseλ '(λ x y))) (list 'y))
(test (free-identifier (parseλ '((λ x y)(λ y z)))) (list 'y 'z))
(test (free-identifier (parseλ '((λ f y)(λ z z)))) (list 'y))
(test (free-identifier (parseλ '(λ x (λ y (y x))))) empty)
(test (free-identifier (parseλ '(λ x (λ y z)))) (list 'z))
