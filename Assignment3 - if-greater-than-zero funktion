; Grammar for drkC
;; drkC -> number
;; drkC -> symbol
;;if-greater-than-zero -> <drk> <drk> <drk>

(define-type drkC
  [drkC-num (n : number)]
  [drkC-id (s : symbol)]
  [if-greater-than-zero (pred : drkC)(trueState : drkC)(falseState : drkC)])

;; parseC : s-exp -> drkC
;; Purpose : To parseC given s-exp to abstract syntax drkC
;; Template : 
;(define (parseC [s : s-expression]) : drkC
;  (cond
;    [n ...]
;    [id ...]
;    any unary or binary function
;    ))

(define (parseC [s : s-expression]) : drkC
  (cond
    [(s-exp-number? s) (drkC-num (s-exp->number s))]
    [(s-exp-symbol? s) (drkC-id  (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
       (cond
         [(= (length sl) 4)
          (case (s-exp->symbol (first sl))
            [(ifzero) (if-greater-than-zero 
                       (parseC (second sl))
                       (parseC (third sl))
                       (parseC (fourth sl)))]
            [else (error 'parseC "invalid keyword !")])]))]))

;;test

(test (parseC '(ifzero 4 5 6))(if-greater-than-zero (drkC-num 4)(drkC-num 5)(drkC-num 6)))
(test (parseC '(ifzero 3 4 5))(if-greater-than-zero (drkC-num 3)(drkC-num 4)(drkC-num 5)))
(test (parseC '(ifzero 1 3 5))(if-greater-than-zero (drkC-num 1)(drkC-num 3)(drkC-num 5)))
(test (parseC '(ifzero 2 7 9))(if-greater-than-zero (drkC-num 2)(drkC-num 7)(drkC-num 9)))
(test (parseC '(ifzero 7 8 9))(if-greater-than-zero (drkC-num 7)(drkC-num 8)(drkC-num 9)))
(test (parseC '(ifzero 12 15 29))(if-greater-than-zero (drkC-num 12)(drkC-num 15)(drkC-num 29)))

;; Function Definition Structure

(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : drkC)])

;; interp : drkC (listof FunDefC) -> number
;; Purpose : To evaluate expressions to numbers.
;; Template :
; (define (interp [e : drkC] [fds : (listof FunDefC)]) : number
;  (type-case drkC in
;    [numC (n) ...]
;    [idC (s) ...]
;; ifZero : drkC drkC drkC -> drkC
;; an f statement that controls if first argument is zero 
;; -- or not, if it is zero that returns second argunment,
;; --- otherwise third argument. Partially lazy.

(define (interp [e : drkC][fds : (listof FunDefC)]) : number
  (type-case drkC e
    [drkC-num (n) n]
    [drkC-id (_) (error 'interp "shouldn't get here")]
    [if-greater-than-zero (pred t f)
             (if (= 0 (interp pred fds))
                 (interp t fds)
                 (interp f fds))]
    ))

;test
(test (interp (if-greater-than-zero (drkC-num 1)(drkC-num 1)(drkC-num 1)) empty) 1)
(test (interp (if-greater-than-zero (drkC-num 2)(drkC-num 3)(drkC-num 4)) empty) 4)
(test (interp (if-greater-than-zero (drkC-num 4)(drkC-num 7)(drkC-num 9)) empty) 9)
(test (interp (if-greater-than-zero (drkC-num 6)(drkC-num 7)(drkC-num 8)) empty) 8)
(test (interp (if-greater-than-zero (drkC-num 3)(drkC-num 5)(drkC-num 6)) empty) 6)
