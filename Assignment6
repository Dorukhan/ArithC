
; Grammar for drkC
;; drkC -> number
;; drkC -> symbol
;;if-greater-than-zero -> <drk> <drk> <drk>
;;appC -> <drk> <drk>
(define-type drkC
  [drkC-num (n : number)]
  [drkC-id (s : symbol)]
  [if-greater-than-zero (pred : drkC)(trueState : drkC)(falseState : drkC)]
  [appC (fun : symbol) (arg : drkC)]
  [binaryOpC (op : symbol) (l : drkC) (r : drkC)])

;; expt : number number -> number
;; Purpose: To calculate exponentiation of given two number, first number base and second is power.
(define (expt (a : number) (b : number)) : number
  (cond
    ((= b 0) 1)
    ((even? b) (sqr (expt a (/ b 2))))
    (else (* a (expt a (- b 1))))))

;; sqr : number -> number
;; Purpose: To calculate square of given number.
(define (sqr (a : number)) : number
  (* a a))

;; Pair is a well-known data structure in Lisp/Scheme family languages,
;; - since we do not have a data structure in plai-type, 
;; - this is an basic implementation of it.
(define-type pair
  (sym-op (sym : symbol)(op : (number number -> number))))

;; A list of pair(sym-op) as table of operations.
;; Handycap of this is, 
;; - it is complety depending on host language's operations.
(define ops
  (list
   (sym-op '+ +)
   (sym-op '* *)
   ;; Several binary operations added as it seen below
   (sym-op '- -)
   (sym-op '/ /)
   (sym-op '^ expt)
   (sym-op 'custom (Î» (x y) (+ (* 2 x) y)))
   ))

;; get-op : symbol -> ((number number) -> number)
;; Purpose : To obtain binary defined operation from operation definition table.
(define (get-op (sym : symbol)) : (number number -> number)
  (sym-op-op (assoc sym ops)))

;; assoc : symbol (listof pair) -> pair
;; Purpose : To associate given symbol with operation defined in a listof pairs.
(define (assoc (s : symbol) (lp : (listof pair))) : pair
  (let ((list-op (filter (lambda (x) (eq? s (sym-op-sym x))) lp)))
    (if (empty? list-op)
        (error 'assoc "Operation not defined")
        (first list-op))))


;; Binding is a data type to bind value with identifiers.
(define-type Binding
  [bind (name : symbol) (val : number)])

;; Just an alias to keep it clean, wrapper around listof Bindings.
(define-type-alias Environment (listof Binding))

;; Empty environment.
(define mt-env empty)

;; Extending environment a wrapper around cons.
(define extend-env cons)

;; Example Environment.
(define EnvNameSpace
  (list
   (bind 'x 5)
   (bind 'y 6)
   (bind 'z 7)
   ))

;; parseC : s-exp -> drkC
;; Purpose : To parseC given s-exp to abstract syntax drkC
(define (parseC [s : s-expression]) : drkC
  (cond
    [(s-exp-number? s) (drkC-num (s-exp->number s))]
    [(s-exp-symbol? s) (drkC-id  (s-exp->symbol s))]
    [(s-exp-list? s)
     (let ([sl (s-exp->list s)])
          (cond
         [(= (length sl) 4)
          (if (symbol=? 'ifzero (s-exp->symbol (first sl)))
              (if-greater-than-zero (parseC (second sl))
                                    (parseC (third sl))
                                    (parseC (fourth sl)))
              (error 'parse "invalid expression as input"))]
         [(= (length sl) 3)
          (binaryOpC (s-exp->symbol (first sl)) 
                     (parseC (second sl)) (parseC (third sl)))]
         [(= (length sl) 2)
          (appC (s-exp->symbol (first sl)) (parseC (second sl)))]
         [else (error 'parse "invalid list input")])
       )]
    [else (error 'parse "invalid input")]))


;;test
(test (parseC (number->s-exp 5))(drkC-num 5))
(test (parseC (symbol->s-exp 'x))(drkC-id 'x))
(test (parseC '(ifzero 4 5 6))(if-greater-than-zero (drkC-num 4)(drkC-num 5)(drkC-num 6)))
(test (parseC '(ifzero 3 4 5))(if-greater-than-zero (drkC-num 3)(drkC-num 4)(drkC-num 5)))
(test (parseC '(ifzero 1 3 5))(if-greater-than-zero (drkC-num 1)(drkC-num 3)(drkC-num 5)))
(test (parseC '(ifzero 2 7 9))(if-greater-than-zero (drkC-num 2)(drkC-num 7)(drkC-num 9)))
(test (parseC '(ifzero 7 8 9))(if-greater-than-zero (drkC-num 7)(drkC-num 8)(drkC-num 9)))
(test (parseC '(ifzero 12 15 29))(if-greater-than-zero (drkC-num 12)(drkC-num 15)(drkC-num 29)))

;; Function Definition Structure
(define-type FunDefC
  [fdC (name : symbol) (arg : symbol) (body : drkC)])

; Example function definition namespace.
(define FuncDefNameSpace
  (list
   (fdC 'sqr 'x (parseC '(* x x)))
   (fdC 'sub1 'x (parseC '(+ x -1)))
   (fdC 'neg 'x (parseC '(* x -1)))
   (fdC 'double 'x (parseC '(+ x x)))
   (fdC 'quadruple 'x (parseC '(double (double x))))
   (fdC 'const5 '_ (parseC (number->s-exp 5)))
   (fdC 'factorial 'n (parseC 
                       '(ifzero n 1
                                (* n (factorial (sub1 n))))))
   (fdC 'fibonacci 'n (parseC 
                       '(ifzero n 1
                                (ifzero (- n 1) 1
                                        (ifzero (- n 2) 1
                                                (+ (fibonacci (- n 1))
                                                   (fibonacci (- n 2))
                                                   ))))))))

;; get-fundef : symbol (listof FunDefC) -> FunDefC
;; Purpose : To find given symbol's(function name/identifier) function definition
(define (get-fundef [n : symbol] [fds : (listof FunDefC)]) : FunDefC
  (cond
    [(empty? fds) (error 'get-fundef "reference to undefined function")]
    [(cons? fds) (cond
                   [(equal? n (fdC-name (first fds))) (first fds)]
                   [else (get-fundef n (rest fds))])]))

;; Tests:
(test (get-fundef 'sub1 FuncDefNameSpace) 
      (fdC 'sub1 'x (parseC '(+ x -1))))
(test (get-fundef 'neg FuncDefNameSpace) 
      (fdC 'neg 'x (parseC '(* x -1))))
(test (get-fundef 'sqr FuncDefNameSpace) 
      (fdC 'sqr 'x (parseC '(* x x))))

;; lookup : symbol (listof Bindings) -> number
;; Purpose : To find given symbol's value
(define (lookup [for : symbol] [env : Environment]) : number
  (cond
    [(empty? env) (error 'lookup "name not found")]
    [else (cond
            [(symbol=? for (bind-name (first env)))
             (bind-val (first env))]
            [else (lookup for (rest env))])]))

;; Tests:
(test (lookup 'x EnvNameSpace) 5)
(test (lookup 'y EnvNameSpace) 6)
(test (lookup 'z EnvNameSpace) 7)

;; interp : drkC (listof FunDefC) -> number
(define (interpC [e : drkC] [env : Environment][fds : (listof FunDefC)]) : number
  (type-case drkC e
    [drkC-num (n) n]
    [drkC-id (s) (lookup s env)]
    [appC (f a) (local ([define fd (get-fundef f fds)])
                  (interpC (fdC-body fd)
                          (extend-env 
                           (bind (fdC-arg fd)(interpC a env fds))
                           mt-env)
                          fds))]
    [binaryOpC (op l r)((get-op op)
                        (interpC l env fds)
                        (interpC r env fds))]
    [if-greater-than-zero (pred t f)
                          (if (= 0 (interpC pred env fds))
                              (interpC t env fds)
                              (interpC f env fds))]
    ))

;test
(test (interpC (parseC '(+ 10 (const5 10)))
              mt-env
              FuncDefNameSpace) 15)
(test (interpC (parseC '(+ 10 (double (+ 1 2))))
              mt-env
              FuncDefNameSpace) 16)
(test (interpC (parseC '(+ 10 (quadruple (+ 1 2))))
              mt-env
              FuncDefNameSpace) 22)

